org: sunhorus
app: capstone-final-project
service: capstone-final-project
frameworkVersion: '2 || 3'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  # variablesResolutionMode: 20210326
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  tracing:
    lambda: true
    apiGateway: true
  logs:
    # Enable API Gateway logs
    restApi: true

  environment:
    MY_PROJECT: serverless-ImageGalary-Capstone-app
    IMAGES_S3_BUCKET: serverless-image-galary-images-253015982248-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    THUMBNAILS_S3_BUCKET: serverless-image-galary-thumbnail-253015982248-${self:provider.stage}
    GALLERIES_TABLE: galleries-253015982248-${self:provider.stage}
    IMAGES_TABLE: gallery-images-253015982248-${self:provider.stage}
    IMAGE_ID_INDEX: ImageIdIndex
    SLS_DEBUG: '*'

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

custom:
  topicName: imagesTopic-253015982248-${self:provider.stage} 
  documentation:
    api:
      info:
        version: v1.0.0
        title: ImageGalary API
        description: Serverless application for ImageGalary Sharing
    models:
      - name: CreateGallery
        contentType: application/json
        schema: ${file(src/models/json-schema/create_gallery_json_request.json)}
      - name: UploadImage
        contentType: application/json
        schema: ${file(src/models/json-schema/create_image_json_request.json)}
      - name: SaveGalleries
        contentType: application/json
        schema: ${file(src/models/json-schema/create_gallery_json_request.json)}
      - name: UpdateGalleriesImage
        contentType: application/json
        schema: ${file(src/models/json-schema/update_gallery_json_request.json)}


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateGallery:
    handler: src/lambda/http/createGallery.handler
    events:
      - http:
          method: post
          path: galleries
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: create new Gallery
            description: create new Alnum
            requestModels:
              "application/json": CreateGallery

    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GALLERIES_TABLE}

  GetGalleries:
    handler: src/lambda/http/getAllGalleries.handler
    events:
      - http:
          method: get
          path: galleries
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.MY_PROJECT}-get-gallery-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GALLERIES_TABLE}
  
  UploadImage:
    handler: src/lambda/http/uploadImage.handler
    events:
      - http:
          method: post
          path: galleries/{glaId}/images
          cors: true
          authorizer: Auth
          documentation:
            summary: Add new Image to gallery
            description: Add new Image to gallery
            requestModels:
              "application/json": UploadImage
      - http:
          method: get
          path: galleries/{glaId}
          cors: true
          authorizer: Auth

    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GALLERIES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX: ${file(./resource/GatewayResponce.yml)}
    GalleriesDynamoDBTable: ${file(./resource/GalleriesTable.yml)}
    ImagesDynamoDBTable: ${file(./resource/ImagesTable.yml)}
    AttachmentsBucket: ${file(./resource/AttachmentsBucket.yml)}
    BucketPolicy: ${file(./resource/BucketPolicy.yml)}
    RequestBodyValidator: ${file(./resource/RequestBodyValidator.yml)}